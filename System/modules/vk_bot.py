import asyncio
import time

import vk_api
from requests.exceptions import ConnectionError, ReadTimeout
from urllib3.exceptions import ReadTimeoutError
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.exceptions import ApiError

import logging
from System import command_manager, config_manager, data_manager

global vk, keys, longpoll, api
global keyboard_user, keyboard_council, keyboard_club


def start():
    logging.info('–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è vk_bot')
    global vk, keys, api
    global keyboard_user, keyboard_council, keyboard_club

    keys = config_manager.get_vk_group_data()
    vk = vk_api.VkApi(token=keys['api_token'])
    api = vk.get_api()

    keyboard_user = create_keyboard_user()
    keyboard_council = create_keyboard_council()
    keyboard_club = create_keyboard_club()

    connect()


def connect():
    global longpoll
    counter = 0
    not_connected = True
    while not_connected:
        try:
            longpoll = VkBotLongPoll(vk, keys['group_id'])
            not_connected = False
            logging.info(f'–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å VK ‚Ññ{counter}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
        except ConnectionError or ReadTimeout or TimeoutError or ReadTimeoutError as err:
            counter += 1
            logging.error(f'–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å VK ‚Ññ{counter}: –ø—Ä–æ–≤–∞–ª–µ–Ω–æ', {'error': err})
            time.sleep(10)


async def listener(loop):
    while True:
        try:
            for event in longpoll.listen():
                await asyncio.wait([loop.create_task(handle(event))])
        except IOError as err:
            logging.error(f'–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å VK: –ø—Ä–æ–≤–∞–ª–µ–Ω–æ', {'error': err})
            connect()


async def handle(event):
    if event.type == VkBotEventType.MESSAGE_NEW:
        message = event.object.get('message').get('text')
        sender_id = str(event.object.get('message').get('from_id'))
        logging.info('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ VK', {'message': message, 'sender_id': sender_id})

        if event.from_user:
            msg, board = change_board(message, sender_id)
            if board is None:
                command_manager.parse(message, sender_id)
            else:
                send(msg, [sender_id], board)


def change_board(text: str, sender_id):
    if text == '–û –∫–ª—É–±–µ':
        return '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ –Ω–∞—Å —É–∑–Ω–∞—Ç—å?', keyboard_club
    elif text == '–ù–∞—á–∞—Ç—å':
        return "–ü—Ä–∏–≤–µ—Ç! " \
               "–Ø –±–æ—Ç –∫–ª—É–±–∞ Robotic! ü§ñ\n\n" \
               "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å: \n" \
               "üîπ –æ –Ω–∞—à–µ–º –∫–ª—É–±–µ\n" \
               "üîπ –≥–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è\n" \
               "üîπ –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è\n" \
               "üîπ –∫–∞–∫–∏–µ —É –Ω–∞—Å –≤–µ–¥—É—Ç—Å—è –ø—Ä–æ–µ–∫—Ç—ã –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n" \
               "‚ùì –ü–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—é –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è [id322610705|–ú–∞—Ä–∫–∞—Ä—è–Ω –ü–µ—Ç—Ä–æ—Å—É]", \
            get_base_keyboard(sender_id)
    elif text == '–ù–∞–∑–∞–¥':
        return '–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É', get_base_keyboard(sender_id)
    else:
        return None, None


def get_base_keyboard(id):
    if data_manager.is_council(id):
        return keyboard_council
    else:
        return keyboard_user


def send(message: str, ids: list, board=None):
    for id in ids:
        try:
            if board is None:
                api.messages.send(
                    message=message,
                    peer_id=int(id),
                    random_id=0,
                )
            else:
                api.messages.send(
                    message=message,
                    peer_id=int(id),
                    random_id=0,
                    keyboard=board.get_keyboard()
                )

            logging.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ VK', {'message': message.replace('\n', ' '), 'peer_id': id})
        except ApiError as err:
            logging.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ VK',
                          {'message': message.replace('\n', ' '), 'id': id, 'error': err})


def create_keyboard_user():
    keyboard = vk_api.keyboard.VkKeyboard(one_time=False)
    keyboard.add_button("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –æ—Ç–∫—Ä—ã—Ç–∞?", color=VkKeyboardColor.PRIMARY)
    keyboard.add_line()
    keyboard.add_button("–û –∫–ª—É–±–µ", color=VkKeyboardColor.SECONDARY)

    return keyboard


def create_keyboard_council():
    keyboard = create_keyboard_user()
    keyboard.add_line()
    keyboard.add_button("–ó–∞–∫—Ä—ã—Ç—å", color=VkKeyboardColor.NEGATIVE)
    keyboard.add_button("–û—Ç–∫—Ä—ã—Ç—å", color=VkKeyboardColor.POSITIVE)

    return keyboard


def create_keyboard_club():
    keyboard = vk_api.keyboard.VkKeyboard(one_time=False)
    keyboard.add_button("–ß—Ç–æ —Ç–∞–∫–æ–µ ROBOTIC?", color=VkKeyboardColor.PRIMARY)
    keyboard.add_line()
    # keyboard.add_button("–ü—Ä–æ–µ–∫—Ç—ã –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", color=VkKeyboardColor.PRIMARY)
    # keyboard.add_line()
    keyboard.add_button("–ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –≤ ROBOTIC?", color=VkKeyboardColor.PRIMARY)
    keyboard.add_line()
    keyboard.add_button("–ù–∞–∑–∞–¥", color=VkKeyboardColor.NEGATIVE)

    return keyboard
